{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","this","props","id","name","type","experience","filledId","fillZeroes","className","src","alt","num","String","length","Component","Pokedex","message","pokemonList","pokemonsList","minimumExp","exp","reduce","acc","pokemon","base_experience","teamNumber","map","pokecard","key","Pokegame","array","team1","team2","team1Set","Set","size","Math","floor","add","random","i","has","push","minimumWinExperience","teams","makeTeams","slice","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.578a41d2.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./Pokecard.css\";\r\n\r\nclass Pokecard extends Component{\r\n    render(){\r\n        const {id,name,type,experience}=this.props;\r\n        let filledId=this.fillZeroes(id);\r\n        return(\r\n            <div className=\"pokecard\">\r\n                <div className=\"pokecard-image-background\">\r\n                    <img className=\"pokecard-image\" src={`https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${filledId}.png`} alt={`${name}`}/>\r\n                </div>\r\n                <div className=\"pokecard-text-container\">\r\n                    <h4 className=\"pokecard-title\">{name}</h4>\r\n                    <p className=\"pokecard-text\">Type: {type}</p>\r\n                    <p className=\"pokecard-text\">EXP: {experience}</p>\r\n                </div>\r\n            </div>  \r\n        )\r\n    }\r\n    fillZeroes(num){\r\n        if(String(num).length===1){\r\n            return \"00\"+num;\r\n        }\r\n        if(String(num).length===2){\r\n            return \"0\"+num;\r\n        }\r\n        return num;\r\n    }\r\n}\r\n\r\nexport default Pokecard;","import React, {Component} from \"react\";\r\nimport \"./Pokedex.css\";\r\nimport Pokecard from \"./Pokecard\"\r\n\r\nclass Pokedex extends Component{\r\n    render(){\r\n        const pokemonList=this.props.pokemonsList;\r\n        let minimumExp=this.props.minimumExp;\r\n        let exp = this.props.pokemonsList.reduce((acc,pokemon)=>acc+pokemon.base_experience,0);\r\n        let className, message;\r\n        if(exp===minimumExp){\r\n            className=\"pokedex-tie\";\r\n            message=\"That's a TIE\"\r\n        } else if(exp>minimumExp){\r\n            className=\"pokedex-winner\";\r\n            message=\"YEAH YOU ARE THE WINNER\";\r\n        } else{\r\n            className = \"pokedex-loser\"\r\n            message = \"Sorry, you are a LOSER\";\r\n        }\r\n        return(\r\n            <div className=\"pokedex\">\r\n                <h2 className={`pokedex-title ${className}`}>TEAM{this.props.teamNumber}</h2>\r\n                <h3 className={`pokedex-subtitle ${className}`}>{message}</h3>\r\n                <div className=\"pokedex-pokecards\">\r\n                    {pokemonList.map(pokecard => <div key={pokecard.id} className=\"pokedex-card\"><Pokecard id={pokecard.id} name={pokecard.name} type={pokecard.type} experience={pokecard.base_experience}/></div>)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokedex;","import React, {Component} from \"react\";\r\nimport \"./Pokegame.css\";\r\nimport Pokedex from \"./Pokedex\"\r\n\r\nclass Pokegame extends Component{\r\n    static defaultProps = {\r\n        pokemonsList: [\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n          ],\r\n    };    \r\n    minimumWinExperience(array){\r\n        let totalExp=array.reduce((acc,pokemon)=> acc+pokemon.base_experience,0);\r\n        return totalExp/2;\r\n    }\r\n    makeTeams(array){\r\n        const team1 = [];\r\n        const team2=[];\r\n        let team1Set= new Set();\r\n        while(team1Set.size<Math.floor(array.length/2)){\r\n            team1Set.add(Math.floor(Math.random()*array.length+1))\r\n        };\r\n        for(let i=0;i<array.length;i++){\r\n            if(team1Set.has(i)) team1.push(array[i]);\r\n            else team2.push(array[i]);\r\n        }\r\n        return [...team1, ...team2];\r\n    }\r\n    render(){\r\n        let minimumExp=this.minimumWinExperience(this.props.pokemonsList);\r\n        const teams = this.makeTeams(this.props.pokemonsList);\r\n        const team1 = teams.slice(0,4);\r\n        const team2 = teams.slice(4);\r\n        return(\r\n            <div className=\"Pokegame\">\r\n                <Pokedex pokemonsList={team1} minimumExp={minimumExp} teamNumber={1} />\r\n                <Pokedex pokemonsList={team2} minimumExp={minimumExp} teamNumber={2} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokegame;","import React from 'react';\nimport './App.css';\nimport Pokegame from './Pokegame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Pokegame/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}